#!/usr/bin/env python
# _*_ coding: UTF-8 _*_

"""A simple converter from SVG to PDF.

For further information please check the file README.txt!
"""

import sys
import argparse
import textwrap
from datetime import datetime
from os.path import dirname, basename, splitext, exists

from reportlab.graphics import renderPDF

from svglib import svglib


__version__ = '0.6.3'
__license__ = 'LGPL 3'
__author__ = 'Dinu Gherman'
__date__ = '2010-03-01'


def svg2pdf(path, outputPat=None):
    "Convert an SVG file to a PDF one."

    # derive output filename from output pattern
    file_info = {
        'dirname': dirname(path) or '.',
        'basename': basename(path),
        'base': basename(splitext(path)[0]),
        'ext': splitext(path)[1],
        'now': datetime.now(),
    }
    out_pattern = outputPat or '%(dirname)s/%(base)s.pdf'
    # allow classic %%(name)s notation
    out_path = out_pattern % file_info
    # allow also newer {name} notation
    out_path = out_path.format(**file_info)

    # generate a drawing from the SVG file
    try:
        drawing = svglib.svg2rlg(path)
    except:
        print('Rendering failed.')
        raise

    # save as PDF file
    if drawing:
        renderPDF.drawToFile(drawing, out_path, showBoundary=0)


# command-line usage stuff

def _main():
    args = dict(
        prog=basename(sys.argv[0]),
        version=__version__,
        author=__author__,
        license=__license__,
        copyleft_year=__date__[:__date__.find('-')],
        ts_pattern="{{dirname}}/out-{{now.hour}}-{{now.minute}}-{{now.second}}-%(base)s.pdf"
    )
    desc = '{prog} v. {version}\n'.format(**args)
    desc += 'An experimental SVG to PDF converter (via ReportLab Graphics)\n'
    epilog = textwrap.dedent('''\
        examples:
          # convert path/file.svg to path/file.pdf
          {prog} path/file.svg

          # convert file1.svg to file1.pdf and file2.svgz to file2.pdf
          {prog} file1.svg file2.svgz

          # convert file.svg to out.pdf
          {prog} -o out.pdf file.svg

          # convert all SVG files in path/ to PDF files with names like:
          # path/file1.svg -> file1.pdf
          {prog} -o "%(base)s.pdf" path/file*.svg

          # like before but with timestamp in the PDF files:
          # path/file1.svg -> path/out-12-58-36-file1.pdf
          {prog} -o {ts_pattern} path/file*.svg

        issues/pull requests:
            https://github.com/deeplook/svglib

        Copyleft by {author}, 2008-{copyleft_year} ({license}):
            http://www.gnu.org/copyleft/gpl.html'''.format(**args))
    p = argparse.ArgumentParser(
        description=desc,
        epilog=epilog,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    p.add_argument('-v', '--version',
        help='Print version number and exit.', 
        action='store_true')

    p.add_argument('-o', '--output',
        metavar='PATH_PAT',
        help='Set output path (incl. the placeholders: dirname, basename,'
             'base, ext, now) in both, %%(name)s and {name} notations.'
    )

    line_filter_default = u''
    p.add_argument('input',
        metavar='PATH',
        nargs='*',
        help='Input SVG file path with extension .svg or .svgz.')

    args = p.parse_args()

    if args.version:
        print(__version__)
        sys.exit()

    if not args.input:
        p.print_usage()
        sys.exit()

    paths = [a for a in args.input if exists(a)]
    for path in paths:
        svg2pdf(path, outputPat=args.output)


if __name__ == '__main__':
    _main()
